Pandas basics:

import pandas as pd
df = pd.read_csv('path_name')
df = pd.read_csv('path_name', index_col='colname') - set index column while reading the file itself
df - displays first and last 5 rows along with first and last 10 branches
df.shape - attribute giving out no of rows and cols
df.info() - column name, non-null entries and datatype
df.head(num_of_rows)
df.tail(num_of_rows)

pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 100)

df = pd.DataFrame(dict) - get a dataframe from a dictionary
series - single column of rows in a df
df.email - single column of emails
df[['col1','col2']] - select multiple columns
df.columns - list all available columns

df.iloc[row_num] - select particular row
df.iloc[[r1, r2, ...]] - select multiple rows
df.iloc[[r1, r2], [c1, c2]]
df.loc[[r1,r2,...], ['col1', 'col2',...]] - select rows and columns based on column names instead of column numbers
df.loc[2:10, 'col3':'col6'] - list slicing - rows from 2 to 10 and columns from 3 to 6

df.set_index('col_name', inplace=True) - sets alternative index instead of default numbering starting from 0. Values do NOT have to be unique. inplace argument is optional - it permanently changes the indices of the dataframe
df.reset_index(inplace=True) - obvious. inplace is optional
df.sort_index(ascending=False) - sorts index alphabetically - ascending=False is optional. If used, it sorts indices in descending order

filt = (df['Country'] == 'India')
df[filt]
-- This is to filter rows which have Country column as India
-- a better way to do this would be to use df.loc[filt] instead of df[filt].
df[filt, ['col1','col2','col3',...]]
filt = (df['Country'] == 'India') & (df['SurveyEase'] == 'Easy') - Combine 2 conditions. & or | can be used according to the requirement
df.loc[~filt] - The '~' symbols gives whatever doesn't have 'True' as a value. Basically 'NOT'
high_sal = (df['Salary_in_usd'] > 70000) - comaprision operators can be used

countries = ['country1', 'country2', 'country3']
filt = df['Country'].isin(countries)
df[filt]
-- multiple entries from a single column can be considered without using '&'

filt = df['LanguageHaveWorkedWith'].str.contains('Python', na=False)
df.loc[filt, 'LanguageHaveWorkedWith']
.str.contains() is a string method which finds whether the given substring is a part of the whole string or not


