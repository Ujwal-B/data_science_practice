Pandas basics:

import pandas as pd
df = pd.read_csv('path_name')
df = pd.read_csv('path_name', index_col='colname') - set index column while reading the file itself
df - displays first and last 5 rows along with first and last 10 branches
df.shape - attribute giving out no of rows and cols
df.info() - column name, non-null entries and datatype
df.head(num_of_rows)
df.tail(num_of_rows)

pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 100)

df = pd.DataFrame(dict) - get a dataframe from a dictionary
series - single column of rows in a df
df.email - single column of emails
df[['col1','col2']] - select multiple columns
df.columns - list all available columns

df.iloc[row_num] - select particular row
df.iloc[[r1, r2, ...]] - select multiple rows
df.iloc[[r1, r2], [c1, c2]]
df.loc[[r1,r2,...], ['col1', 'col2',...]] - select rows and columns based on column names instead of column numbers
df.loc[2:10, 'col3':'col6'] - list slicing - rows from 2 to 10 and columns from 3 to 6

df.set_index('col_name', inplace=True) - sets alternative index instead of default numbering starting from 0. Values do NOT have to be unique. inplace argument is optional - it permanently changes the indices of the dataframe
df.reset_index(inplace=True) - obvious. inplace is optional
df.sort_index(ascending=False) - sorts index alphabetically - ascending=False is optional. If used, it sorts indices in descending order

filt = (df['Country'] == 'India')
df[filt]
-- This is to filter rows which have Country column as India
-- a better way to do this would be to use df.loc[filt] instead of df[filt].
df[filt, ['col1','col2','col3',...]]
filt = (df['Country'] == 'India') & (df['SurveyEase'] == 'Easy') - Combine 2 conditions. & or | can be used according to the requirement
df.loc[~filt] - The '~' symbols gives whatever doesn't have 'True' as a value. Basically 'NOT'
high_sal = (df['Salary_in_usd'] > 70000) - comaprision operators can be used

countries = ['country1', 'country2', 'country3']
filt = df['Country'].isin(countries)
df[filt]
-- multiple entries from a single column can be considered without using '&'

filt = df['LanguageHaveWorkedWith'].str.contains('Python', na=False)
df.loc[filt, 'LanguageHaveWorkedWith']
.str.contains() is a string method which finds whether the given substring is a part of the whole string or not

df.columns = ['newcolname1', 'newcolname2', 'newcolname3',...,'newcolnamen'] - change column names by passing a list of new column names
df.columns = [x.upper() for x in df.columns] - list comprehension to modify all columns (here using upper() function)
df.columns = df.columns.str.replace(' ', '_') - find strings which contain ' ' and replace it with '_'

columns = {'first_name':'first', 'last_name':'last'}
df.rename(columns, inplace=True)
-- rename specific columns by passing a dictionary containing pairs of old names and their replacement

df.loc[2] = ['Ujwal', 'Bharadwaj', 'ujwal@email.com'] - change all columns of row 2
df.loc[2, ['last', 'email']] = ['R', 'ujwal@gmail.com'] - select only those columns which need to be modified and send a list with modified values
df.loc[2, 'last'] = 'Bharadwaj' - single value changes don't need list
df.at[2, 'last] = 'R' - alternative to .loc while replacing values

filt = (df['email'] == 'ujwal@gmail.com')
df.loc[filt, 'last'] = 'Bharadwaj'
-- apply filter and change value

df['email'] = df['email'].str.lower() - change all values of email column to lowercase

df.apply(lambda: x:x.min())
df.applymap(len)
df['first_name'].map({'Ujwal':'Ulhas', 'R':'Bharadwaj'}) - replaces key with value from the dictionary. However, if other values present in thr df aren't written in the dictionary, it replaces them with NaN
df['first_name'].replace({'Ujwal':'Ulhas', 'R':'Bharadwaj'}) - same as above, except it doesn't substitute values not mentioned in the dictionary

df['full_name'] = df['first'] + ' ' + df['last']
df.drop(columns=['first', 'last'], inplace=True)
df[['first', 'last']] = df['full_name'].str.split(" ", expand=True)
df.append({'first':'Tony'}, ignore_index=True)

people2 = {
    'first': ['Tony', 'Steve'],
    'last': ['Stark', 'Rogers'],
    'email': ['IronMan@avenge.com', 'Cap@avenge.com']
}
df2 = pd.DataFrame(people2)
df = df.append(df2, ignore_index=True)

df.drop(index=4, inplace=True)

filt = df['last'] == 'Doe'
df.drop(index=df[filt].index, inplace=True)

df.sort_values(by='first')
df.sort_values(by='first', ascending=False)
df.sort_values(by=['last', 'first'])